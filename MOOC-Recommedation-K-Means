# -*- coding: utf-8 -*-
"""Recommendation-NPTEL-clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JK1A8jvzkQ6uOa89keS6HYA-8bfdTn_3
"""

from google.colab import drive
drive.mount('/content/gdrive')

#importing the libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import norm

#unzipping the data and loading it into the environment
!unzip /content/gdrive/My\ Drive/Anonymized_NPTEL_Enrollment_Data.zip

# jan 2021
def MID(s, start, length):
# example: MID("apple",2,3) returns "ppl"
return str(s[start - 1: start - 1 + length])

#loading Jan 2020 semester data into dataframe df1

import glob
#import pandas as pd

#Jan 2020
df_list = []
for file in glob.glob('/content/Anonymized NPTEL Enrollment Data - 2019-2021/2020 - Jan/*.csv'):
# Tweak this to work for your actual filepaths, if needed.

t_course_id = MID(file,47,10)
#print(course_id)
df = (pd.read_csv(file)
.assign(Course_id=t_course_id))
df_list.append(df)

df1 = pd.concat(df_list)

# #loading July 2020 semester data into dataframe df2
df_list = []
for file in glob.glob('/content/Anonymized NPTEL Enrollment Data - 2019-2021/2020 - July/*.csv'):
# Tweak this to work for your actual filepaths, if needed.

t_course_id = MID(file,47,10)
#print(course_id)
df = (pd.read_csv(file)
.assign(Course_id=t_course_id))
df_list.append(df)

df2 = pd.concat(df_list)

df_combined=pd.concat([df1,df2])
df_combined.info()

df_combined_final=df_combined.drop(['country', 'state','city','college','local_chapter','college_id','motivation','Unnamed: 0','employer_id', 'scholarship', ' scholarship', ' city', 'study_year', 'designation', 'exam_taker', 'degree', ' degree', 'graduation year'], axis=1)

df_combined_final.info()

#keeping only the 'age_group', 'profession', 'qualification' and 'department' columns for k-means clustering
df_combined_final_2 = pd.get_dummies(df_combined_final, columns=["age_group","profession", "qualification", "department"])

from sklearn.cluster import KMeans

#using only the first 10000 rows for clustering (because the computational limitations)
df_combined_final_10k = df_combined_final_2.head(10000)

df_combined_final_10k = df_combined_final_10k.drop(['user_id','Course_id'], axis=1)

df_combined_final_10k.head()

#k-means clustering
cost = []
for i in range(1, 41):
KM = KMeans(n_clusters = i, max_iter = 500).fit(df_combined_final_10k)
cost.append(KM.inertia_)


cost

#cluster analysis for plots
import matplotlib.pyplot as plt
plt.plot(cost)
plt.show()